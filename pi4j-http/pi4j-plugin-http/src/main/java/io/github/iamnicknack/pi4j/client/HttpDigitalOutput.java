package io.github.iamnicknack.pi4j.client;

import com.pi4j.context.Context;
import com.pi4j.exception.InitializeException;
import com.pi4j.exception.ShutdownException;
import com.pi4j.io.exception.IOException;
import com.pi4j.io.gpio.digital.DigitalOutput;
import com.pi4j.io.gpio.digital.DigitalOutputBase;
import com.pi4j.io.gpio.digital.DigitalOutputConfig;
import com.pi4j.io.gpio.digital.DigitalState;
import io.github.iamnicknack.pi4j.client.event.DigitalEventSourceFactory;
import io.github.iamnicknack.pi4j.client.requests.HttpRequests;
import okhttp3.sse.EventSource;

public class HttpDigitalOutput extends DigitalOutputBase {

    private final HttpRequests httpRequests;
    private final DigitalEventSourceFactory eventSourceFactory;
    private EventSource eventSource;

    HttpDigitalOutput(
            HttpDigitalOutputProvider provider,
            DigitalOutputConfig config,
            HttpRequests httpRequests,
            DigitalEventSourceFactory eventSourceFactory
    ) {
        super(provider, config);
        this.httpRequests = httpRequests;
        this.eventSourceFactory = eventSourceFactory;
    }

    @Override
    public DigitalOutput initialize(Context context) throws InitializeException {
        super.initialize(context);
        // We don't want to raise events ourselves.
        // We only want to forward events generated by the device we're connecting to
        this.eventSource = eventSourceFactory.start(this, this.stateChangeEventManager::dispatch);
        return this;
    }

    @Override
    public DigitalOutput shutdownInternal(Context context) throws ShutdownException {
        super.shutdownInternal(context);
        this.eventSource.cancel();
        try {
            httpRequests.deleteJson(String.format("/api/config/digitaloutput/%s", this.config.id()), Void.class);
        } catch (HttpRequests.HttpException e) {
            throw new ShutdownException(e);
        }
        return this;
    }

    @Override
    public DigitalOutput state(DigitalState state) throws IOException {
        try {
            var result = httpRequests.putJson(String.format("/api/digitaloutput/%s/%s", this.config.id(), state.value()), Integer.class);
            this.state = DigitalState.getState(result);
            return this;
        } catch (HttpRequests.HttpException e) {
            return this;
        }
    }

    @Override
    public DigitalState state() {
        var result = httpRequests.getJson(String.format("/api/digitaloutput/%s", this.config.id()), Integer.class);
        return DigitalState.getState(result);
    }
}
